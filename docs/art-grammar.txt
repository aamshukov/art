# TYPE
TYPE                                : integral_type array_type_rank_specifier_opt
                                    | type_name array_type_rank_specifier_opt
                                    | type_parameter array_type_rank_specifier_opt
                                    ;

type_name                           : fully_qualified_identifier
                                    ;


#+
type_parameter_seq_opt              : type_parameter_seq                                                                # struct A, record B<T, U, R>, foo: fn<U,R, T>
                                    | ε
                                    ;

type_parameter_seq                  : '<' type_parameters '>'
                                    ;

type_parameters                     : type_parameter                                                                    # type_parameter (',' type_parameter)*
                                    | type_parameters ',' type_parameter
                                    ;

type_parameter                      : identifier
                                    ;
#-


#+
type_argument_seq_opt               : type_argument_seq
                                    | ε
                                    ;

type_argument_seq                   : '<' type_arguments '>'
                                    ;

type_arguments                      : type_argument                                                                     # type_argument (',' type_argument)*
                                    | type_arguments ',' type_argument
                                    ;

type_argument                       : TYPE
                                    ;
#-


#+
array_type_rank_specifier_opt       : array_type_rank_specifier
                                    | ε
                                    ;

array_type_rank_specifier           : '[' array_type_ranks_opt ']'
                                    ;

array_type_ranks_opt                : array_type_ranks
                                    | ε
                                    ;

array_type_ranks                    : ','
                                    | array_type_ranks ','
                                    ;
#-



#+
array_type_specifier_opt            : array_type_specifier
                                    | ε
                                    ;

array_type_specifier                : '[' array_modifiers_opt array_dimensions ']'                                      # zero based, checked array, row based, optionally column based and/or unchecked
                                    ;

array_dimensions                    : array_dimension                                                                   # array_dimension (',' array_dimension)*
                                    | array_dimensions ',' array_dimension                                              # all ',' as a separator of a dimension
                                    ;

array_dimension                     : array_upper_bound                                                                 # array_lower_bound ('..' array_upper_bound)?  a[2]
                                    | array_lower_bound '..' array_upper_bound                                          # array_lower_bound ('..' array_upper_bound)?  a[1..2]
                                    ;

array_lower_bound                   : array_bound_expression
                                    ;

array_upper_bound                   : array_bound_expression
                                    ;

array_bound_expression              : non_assignment_expression                                                         # must evaluate to compilation time constant integer
                                    ;

array_modifiers_opt                 : array_modifiers ':'
                                    | ε
                                    ;

array_modifiers                     : array_modifier
                                    | array_modifiers array_modifier
                                    ;

array_modifier                      : 'column'                                                                          # column based array specifier
                                    | 'row'                                                                             # row based array specifier - default
                                    | 'jagged'                                                                          # array of arrays, possibly of different sizes
                                    | 'sparse'                                                                          # sparse array with implicitly replicated value, see Chapel
                                    | 'unchecked'                                                                       # unchecked array specifier
                                    | 'dynamic'                                                                         # dynamic allocated array
                                    ;
#-


#+
array_slicing_specifier             : '[' array_slice_specifier_opt ':' array_slice_specifier_opt array_slicing_step_opt ']'
                                    ;

array_slice_specifier_opt           : array_slice_specifier
                                    | ε
                                    ;

array_slice_specifier               : non_assignment_expression                                                         # must evaluate to compilation time constant integer
                                    ;

array_slicing_step_opt              : array_slicing_step
                                    | ε
                                    ;

array_slicing_step                  : ':' array_slice_specifier
                                    ;
#-


#+
integral_type                       : 'int'
                                    | 'integer'
                                    | 'real'
                                    | 'float'
                                    | 'double'
                                    | 'decimal'
                                    | 'number'
                                    | 'bool'
                                    | 'boolean'
                                    | 'string'
                                    ;
#-



# INITIALIZATION
variable_initializers_opt           : variable_initializers
                                    | ε
                                    ;

variable_initializers               : variable_initializer
                                    | variable_initializers ',' variable_initializer
                                    ;

variable_initializer                : expression
                                    | array_initializer
                                    ;

array_initializer_opt               : array_initializer
                                    | ε
                                    ;

array_initializer                   : '{' variable_initializers '}'
                                    ;



# DECLARATIONS
local_declaration                   : identifiers
                                    | identifiers ':' declaration_specifiers_opt TYPE declaration_specifiers_opt
                                    | identifiers ':' declaration_specifiers_opt TYPE declaration_specifiers_opt '=' variable_initializer
                                    | identifiers ':' variable_initializer
                                    ;

declaration_specifiers_opt          : declaration_specifiers
                                    | ε
                                    ;

declaration_specifiers              : declaration_specifier
                                    | declaration_specifiers
                                    ;

declaration_specifier               : 'const'
                                    | 'readonly'
                                    ;



# EXPRESSIONS
expressions                         : expression
                                    | expressions ',' expression
                                    ;

expression                          : non_assignment_expression
                                    | assignment_expression
                                    ;

non_assignment_expression           : conditional_expression
                                    ;

conditional_expression              : conditional_or_expression
                                    | conditional_or_expression '?' expression ':' expression
                                    ;

assignment_expression               : unary_expression assignment_operator expression
                                    ;

unary_expression                    : primary_expression
                                    | '+' unary_expression
                                    | '-' unary_expression
                                    | '!' unary_expression
                                    | '~' unary_expression
                                    | pre_increment_expression                                                          # ++i
                                    | pre_decrement_expression                                                          # --i
                                    ;

multiplicative_expression           : unary_expression
                                    | multiplicative_expression '*' unary_expression
                                    | multiplicative_expression '/' unary_expression
                                    | multiplicative_expression '%' unary_expression
                                    ;

additive_expression                 : multiplicative_expression
                                    | additive_expression '+' multiplicative_expression
                                    | additive_expression '-' multiplicative_expression
                                    ;

shift_expression                    : additive_expression
                                    | shift_expression '<<' additive_expression
                                    | shift_expression '>>' additive_expression                                         # > >
                                    ;

relational_expression               : shift_expression
                                    | relational_expression '<' shift_expression
                                    | relational_expression 'lt' shift_expression
                                    | relational_expression '>' shift_expression
                                    | relational_expression 'gt' shift_expression
                                    | relational_expression '<=' shift_expression
                                    | relational_expression 'le' shift_expression
                                    | relational_expression '>=' shift_expression
                                    | relational_expression 'ge' shift_expression
                                    | relational_expression 'is' TYPE
                                    ;

equality_expression                 : relational_expression
                                    | equality_expression '==' relational_expression
                                    | equality_expression 'eq' relational_expression
                                    | equality_expression '!=' relational_expression
                                    | equality_expression 'ne' relational_expression
                                    ;

and_expression                      : equality_expression
                                    | and_expression '&' equality_expression
                                    ;

exclusive_or_expression             : and_expression
                                    | exclusive_or_expression '^' and_expression
                                    ;

inclusive_or_expression             : exclusive_or_expression
                                    | inclusive_or_expression '|' exclusive_or_expression
                                    ;

conditional_and_expression          : inclusive_or_expression
                                    | conditional_and_expression '&&' inclusive_or_expression
                                    | conditional_and_expression 'and' inclusive_or_expression
                                    ;

conditional_or_expression           : conditional_and_expression
                                    | conditional_or_expression '||' conditional_and_expression
                                    | conditional_or_expression 'or' conditional_and_expression
                                    ;

primary_expression                  : literal                                                                           # 5, 3.14, 'text', true
                                    | identifier type_argument_seq_opt
                                    | member_access                                                                     # Foo.name, foo.name
                                    | invocation_expression                                                             # foo(...)
                                    | post_increment_expression                                                         # i++
                                    | post_decrement_expression                                                         # i--
                                    | array_literal                                                                     # [ [1,5], [2,3], [5,-1] ]
                                    | array_element_access                                                              # array[0,2]
                                    | array_slicing_expression                                                          # a[start:stop:step]
                                    | object_creation_expression
                                    | parenthesized_expression                                                          # '(' expression ')'
                                    ;

member_access                       : integral_type '.' identifier type_argument_seq_opt                                # int.v, real.A
                                    | primary_expression '.' identifier type_argument_seq_opt                           # geo.point<T>, point<real>(1,2,3).A
                                    ;

invocation_expression               : primary_expression '(' arguments_opt ')'
                                    ;

array_element_access                : primary_expression '[' arguments ']'                                              # except array creation
                                    ;

array_slicing_expression            : primary_expression array_slicing_specifier
                                    ;

object_creation_expression          : TYPE '{' arguments_opt '}'
                                    | TYPE array_type_specifier '{' array_initializer_opt '}'
                                    ;

pre_increment_expression            : '++' unary_expression
                                    ;

pre_decrement_expression            : '--' unary_expression
                                    ;

post_increment_expression           : primary_expression '++'
                                    ;

post_decrement_expression           : primary_expression '--'
                                    ;

parenthesized_expression            : '(' expression ')'
                                    ;

assignment_operator                 : '='
                                    | '+='
                                    | '-='
                                    | '*='
                                    | '/='
                                    | '%='
                                    | '&='
                                    | '|='
                                    | '^='
                                    | '<<='
                                    | '>>='                                                                             # > >=
                                    ;


#+
arguments_opt                       : arguments
                                    | ε
                                    ;

arguments                           : argument
                                    | arguments ',' argument
                                    ;

argument                            : argument_name_opt argument_value lazy_opt                                         # lazy parameters evaluation only in invocation_expression
                                    ;

argument_name_opt                   : argument_name
                                    | ε
                                    ;

argument_name                       : identifier ':'
                                    ;

argument_value                      : non_assignment_expression
                                    ;

lazy_opt                            : 'lazy'                                                                            # lazy parameters evaluation
                                    | ε
                                    ;
#-




fully_qualified_identifier          : identifier type_argument_seq_opt                                                  # A<T>
                                    | fully_qualified_identifier '.' identifier type_argument_seq_opt                   # A<T>.B<U>.C<A<B<U>>>
                                    ;

identifiers                         : identifier
                                    | identifiers ',' identifier
                                    ;

identifier                          : 'identifier'
                                    ;

literal                             : 'integer_number_literal'
                                    | 'real_number_literal'
                                    | 'boolean_literal'                                                                 # true false
                                    | 'string_literal'
                                    ;

terminal                            : 'terminal'                                                                        # wrapper for terminals
                                    ;

INDENT                              : 'indent'
                                    ;

DEDENT                              : 'dedent'
                                    ;

