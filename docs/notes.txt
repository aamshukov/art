endianness_map = {
    '>': 'big',
    '<': 'little',
    '=': sys.byteorder,
    '|': 'not applicable',
}


https://martinheinz.dev/blog/32
class Person:
    def __init__(self, **kwargs):
        self.__dict__.update(**kwargs)

class Person:
    def __init__(self, **kwargs):
        vars(self).update(**kwargs)  # Alternatively use `vars()`
The snippet above demonstrates usage of self.__dict__ which is a dictionary which stores all the attributes of class (unless __slots__ is declared)



https://stackoverflow.com/questions/5268404/what-is-the-fastest-way-to-check-if-a-class-has-a-function-defined
invert_op = getattr(self, "invert_op", None)
if callable(invert_op):
    invert_op(self.path.parent_op)



https://stackoverflow.com/questions/5910703/how-to-get-all-methods-of-a-python-class-with-given-decorator




#sys.path.append(os.path.abspath('src'))
#sys.path.append(os.path.abspath('adt'))
#sys.path.append(os.path.abspath('core'))
#sys.path.append(os.path.abspath('patterns'))
#sys.path.append(os.path.abspath('algorithms'))


import importlib
 modnames = ["os", "sys", "math"]
 for lib in modnames:
     globals()[lib] = importlib.import_module(lib)



# How to merge two dictionaries
# in Python 3.5+
>>> x = {'a': 1, 'b': 2}
>>> y = {'b': 3, 'c': 4}
>>> z = {**x, **y}
>>> z
{'c': 4, 'a': 1, 'b': 3}



# Different ways to test multiple
# flags at once in Python
x, y, z = 0, 1, 0

if x == 1 or y == 1 or z == 1:
    print('passed')

if 1 in (x, y, z):
    print('passed')

# These only test for truthiness:
if x or y or z:
    print('passed')

if any((x, y, z)):
    print('passed')





    @staticmethod
    def collect_predecessors(vertex, graph):
        """
        """
        assert vertex is not None, "Invalid argument 'vertex'"
        assert vertex.id in graph.vertices, f"Missing vertex: {vertex}"
        result = list()
        if graph.digraph:
            pass
        else:
            edges = graph.get_edges(vertex)
            for edge in edges:
                vertex_u = edge.endpoints[0]
                vertex_v = edge.endpoints[1]
                if vertex == vertex_v:  # incoming edge
                    result.append(vertex_u)
        return result




# How to sort a Python dict by value
# (== get a representation sorted by value)

>>> xs = {'a': 4, 'b': 3, 'c': 2, 'd': 1}

>>> sorted(xs.items(), key=lambda x: x[1])
[('d', 1), ('c', 2), ('b', 3), ('a', 4)]

# Or:

>>> import operator
>>> sorted(xs.items(), key=operator.itemgetter(1))
[('d', 1), ('c', 2), ('b', 3), ('a', 4)]




        collected_vertices = list()
        dfs_visitor = DfsVisitor(graph)
        for vertex in graph.vertices.values():
            if (vertex.flags & Flags.VISITED) != Flags.VISITED:
                v = dfs_visitor.visit(vertex, callback=lambda v: collected_vertices.append(v))
                collected_vertices.append(next(v))
        assert collected_vertices == [v1, v2, v3]





# The get() method on dicts
# and its "default" argument
name_for_userid = {
    382: "Alice",
    590: "Bob",
    951: "Dilbert",
}

def greeting(userid):
    return "Hi %s!" % name_for_userid.get(userid, "there")

>>> greeting(382)
"Hi Alice!"
>>> greeting(333333)
"Hi there!"





            for vertex in graph.vertices.values():
                if (vertex.flags & Flags.VISITED) != Flags.VISITED:
                    for v in GraphAlgorithms.dfs(vertex):
                        collected_vertices.append(v)
            assert len(collected_vertices) == len(vertices)




reverse list
[result[k] for k in range(len(result)-1, -1, -1)]




        for i in range(len(self._vertices)):
            result.append([0 for i in range(len(self._vertices))])
        for edge in self._edges.values():
            result[edge.endpoints[0].id][edge.endpoints[1].id] = edge.value if edge.value else 1



https://realpython.com/primer-on-python-decorators/
import functools

def debug(func):
    """Print the function signature and return value"""
    @functools.wraps(func)
    def wrapper_debug(*args, **kwargs):
        args_repr = [repr(a) for a in args]                      # 1
        kwargs_repr = [f"{k}={v!r}" for k, v in kwargs.items()]  # 2
        signature = ", ".join(args_repr + kwargs_repr)           # 3
        print(f"Calling {func.__name__}({signature})")
        value = func(*args, **kwargs)
        print(f"{func.__name__!r} returned {value!r}")           # 4
        return value
    return wrapper_debug

import math
from decorators import debug

# Apply a decorator to a standard library function
math.factorial = debug(math.factorial)

def approximate_e(terms=18):
    return sum(1 / math.factorial(n) for n in range(terms))






        def dfs(node):
            stack.append(node)
            nodes.append(node)
            for kid in node.kids:
                dfs(kid)
                nodes.append(node)
            stack.pop()

        dfs(tree)







    @property
    def leaf(self):
        return self.degree == 1 or self.degree == 0




2D array:
a = [[0 for column in range(columns)] for row in range(rows)]
a = [[0] * cols for _ in range(rows)]



import heapq
pqueue = list()  # priority queue
heapq.heappush(pqueue, (10, 'v2'))
heapq.heappush(pqueue, (10, 'v1'))
heapq.heappush(pqueue, (0, 'v3'))
value, vertex = heapq.heappop(pqueue)
value, vertex




https://github.com/abarnert/treestuff/blob/master/treestuff.py
def postorder(node, children_func):
    for child in children_func(node):
        yield from postorder(child, children_func)
    yield node

# ... or iteratively:

def preorder(node, children_func):
    s = [node]
    while s:
        node = s.pop()
        yield node
        s.extend(reversed(list(children_func(node))))

# ... and of course it works just as well for BFS as fro DFS:

def levelorder(node, children_func):
    q = collections.deque([node])
    while q:
        node = q.popleft()
        yield node
        q.extend(children_func(node))





        ss = SuffixArray.concatenate_strings(['abca', 'bcad', 'daca'])



        # full_size = core_size + sum(map(len, keys))


мерджить словари
cities_us = {'New York City': 'US', 'Los Angeles': 'US'}
cities_uk = {'London': 'UK', 'Birmingham': 'UK'}
cities = cities_us|cities_uk
print(cities)


A = [1, 2, 3]
B = (4, 5, 6)
C = {7, 8, 9}
L = [*A, *B, *C]
print(L)





import itertools
from typing import Iterable

def pairwise(iterable: Iterable):
    """Iterate over elements two by two.

    s -> (s0,s1), (s1,s2), (s2, s3), ...
    """
    a, b = itertools.tee(iterable)
    next(b, None)
    return zip(a, b)

def iter_slice(iterable: bytes, n: int):
    """Yield slices of size n and says if each slice is the last one.

    s -> (b'123', False), (b'45', True)
    """
    start = 0
    stop = start + n
    final_offset = len(iterable)

    while True:
        if start >= final_offset:
            break

        rv = iterable[start:stop]
        start = stop
        stop = start + n
        yield rv, start >= final_offset




    def split_entries(self) -> list:
        """Split the entries in half.

        Keep the lower part in the node and return the upper one.
        """
        len_entries = len(self.entries)
        rv = self.entries[len_entries//2:]
        self.entries = self.entries[:len_entries//2]
        assert len(self.entries) + len(rv) == len_entries
        return rv







def literal_patterns(subject):
    match subject:
        case 1:
            print("The subject matches with 1")
        case 1.0:
            print("The subject matches with 1.0")
        case 2+3j:
            print(f"The real and imaginary parts are 2 and 3 respectively.")
        case "Masashi Kishimoto":
            print(f"Masashi Kishimoto is the author of manga series which was first published in 1999.")
        case None:
            print("The subject matches with None")
        case True:
            print("The subject matches with True")


def capture_patterns(subject):

    match subject:
        case [a,]:
            print(f"Collection has only one entry: {a}")
        case (a, b):
            print(f"Find flowrate for volume {a}litres and time {b}secs")
        case value:
            print(f"{value} is the value of subject")



def wildcard_patterns(subject):

    match subject:
        case (1,_,1):
            print(f"{subject} is a palindrome collection")
        case (_,_):
            print(f"{subject} is a collection of 2")
        case _:
            print("Unknown Match")



def as_patterns(subject):

    match subject:
        case "Kg" as mass:
            print(f"SI unit for mass is {mass}")
        case "N" as a force:
            print(f"SI unit for force is {force}")


def or_patterns(subject):

    match subject:
        case "RED" | "YELLOW" | "BLUE" as p_colour:
            print(f"{p_colour} is one of the primary colours")
        case colour:
            print(f"{colour} is not one of the primary colours")



def guard(subject):

    match subject:
        case int(number) if number % 2:
            print(f"{number} is an odd integer")
        case int(number):
            print(f"{number} is an even integer")
        case element:
            print(f"{element} is not an integer")






    # def revoke_codepoint(self):
    #     """
    #     """
    #     if self._content_position > self._start_content:
    #         self._content_position -= 1
    #     result = self._content[self._content_position]
    #     return result




        self._unicode = False  # true if the last obtained codepoint from unicode-escape
        self._unicode_length = 0  # length of unicode codepoint






    def advance(self):
        """
        Content is represented as string of codepoints.
        """
        self._content_position += 1
        if self._content_position < self._end_content:
            self._codepoint = self._content.data[self._content_position]
            if Text.back_slash(self._codepoint):
                if self._unicode_backslash_count % 2 == 0:  # '\' might start unicode escape sequence
                    prefix = self.peek()  # check for single '\': ..._count = 0, 2, etc.
                    if Tokenizer.unicode_escape_prefix(prefix):
                        mode = 'u' if prefix == 0x00000075 else 'U'
                        self._codepoint, self._content_position =\
                            self.consume_unicode_escape(mode, self._content_position)
                    else:
                        self._unicode_backslash_count += 1
                else:
                    self._unicode_backslash_count += 1  # single '\'
                    self._codepoint, self._content_position = self.consume_escape()
            else:
                self._unicode_backslash_count = 0
        else:
            self._codepoint = Text.eos_codepoint()
        if self._content_position > self._end_content:
            self._content_position = self._end_content
        assert Text.valid_codepoint(self._codepoint)
        return self._codepoint









    def scan_number(self):
        """
        Binary:      0b101111100011   0b__101_1_1_1100_011
        Octal:       0o5743 or 05743  0o_57__4_3 or 0__57_4____3
        Decimal:     3043             3___0__4_3
        Hexadecimal: 0xBE3            0xB__E_3
        Real:        3.14159265359  3.1415E2    3.1415e2    3_5.1__41_5E2    3.1_41_5e2
                     3.141__26_3_9  3.1415E+2   3.1415e+2   3_6.1__41_5E+2   3.1_41_5e+2
                     3.141_______5  3.1415E-2   3.1415e-2   3_7.1__41_5E-2   3.1_41_5e-2
        Digit separator: _
        Not allowed at the beginning, before fraction, inside fraction ot at the end.
        Illegals: _10, 10_, 10_.5, 10._5, 10.e_-5, 10.e+5_34
        All numbers are 64 bits.
        """
        value = list()
        octal_prefix = False  # true if 0xxx
        codepoint = self._codepoint
        if Text.ascii_zero_digit(codepoint):  # only consider ASCII numbers
            match self.advance():
                case (0x00000062 | 0x00000042):  # b or B
                    radix = 2
                    digits = Text.ascii_binary_digit
                    self.advance()
                case (0x0000006F | 0x0000004F):  # o or O
                    radix = 8
                    digits = Text.ascii_octal_digit
                    self.advance()
                case (0x00000078 | 0x00000058):  # x or X
                    radix = 16
                    digits = Text.ascii_hexadecimal_digit
                    self.advance()
                case _:
                    # no need to advance as 0 already consumed
                    radix = 8
                    digits = Text.ascii_octal_digit
                    octal_prefix = True
                    value.append(codepoint)
        else:
            radix = 10
            digits = Text.ascii_decimal_digit
        valid = True  # track erroneous or not status
        fraction = False  # everything after . fraction, switching to real
        exponent = False  # true if consumed exponent e|E
        exponent_sign = False  # true if consumed exponent sign, + or -
        if (not octal_prefix and
                (ArtTokenizer.digits_separator(self._codepoint) or
                 ArtTokenizer.fraction_start(self._codepoint) or
                 ArtTokenizer.exponent_start(self._codepoint) or
                 ArtTokenizer.exponent_sign(self._codepoint))):
            valid = False  # separator(s), fraction, exponent, exponent sign cannot start number
        while (valid and
               not Text.eos(self._codepoint) and
               (digits(self._codepoint) or
                ArtTokenizer.digits_separator(self._codepoint) or
                ArtTokenizer.fraction_start(self._codepoint) or
                ArtTokenizer.exponent_start(self._codepoint) or
                ArtTokenizer.exponent_sign(self._codepoint))):
            if ArtTokenizer.digits_separator(self._codepoint):
                # if fraction:
                #     valid = False  # no separators in fraction
                #     break
                # else:
                self.advance()
                continue
            if ArtTokenizer.fraction_start(self._codepoint):
                if ((radix != 10 and  # only decimals
                     (radix == 8 and not octal_prefix)) or  # or octal as decimal
                        fraction):  # already parsing fraction
                    valid = False
                    break
                fraction = True
            elif ArtTokenizer.exponent_start(self._codepoint):
                if ((radix != 10 and  # only decimals
                     (radix == 8 and not octal_prefix)) or  # or octal as decimal
                        exponent):  # already parsing exponent
                    valid = False
                    break
                exponent = True
            elif ArtTokenizer.exponent_sign(self._codepoint):
                if ((radix != 10 and  # only decimals
                     (radix == 8 and not octal_prefix)) or  # or octal as decimal
                        exponent_sign):  # already seen exponent sign
                    valid = False
                    break
                exponent_sign = True
            value.append(self._codepoint)
            self.advance()
        if valid and (ArtTokenizer.digits_separator(self._codepoint) or
                      ArtTokenizer.fraction_start(self._codepoint) or
                      ArtTokenizer.exponent_start(self._codepoint) or
                      ArtTokenizer.exponent_sign(self._codepoint)):
            valid = False  # # separator(s), fraction, exponent, exponent sign cannot end number
        if valid:
            try:
                value = ''.join(map(str, map(chr, value)))
                if fraction:
                    self._token.kind = TokenKind.REAL
                    self._token.value = float(value)
                else:
                    self._token.kind = TokenKind.INTEGER
                    self._token.value = int(value, radix)
            except ValueError as ex:
                valid = False
        if not valid:
            self._diagnostics.add(Status(f'Invalid numeric literal at '
                                         f'{self.content.get_location(self._content_position)}',
                                         'tokenizer',
                                         Status.INVALID_REAL_LITERAL if fraction else Status.INVALID_INT_LITERAL))



            assert (indent % self._indent_size == 0,
                    f"Invalid indent, must be multiple of {self._indent_size}.")










    def process_indentation(self):
        """
        """
        if self._dedents:
            self._token.kind = self._dedents.popleft()
        else:
            if self._beginning_of_line:
                content_position = self._content_position
                codepoint = self._codepoint
                self._beginning_of_line = False
                if self._content_position < self._end_content:
                    indent = 0
                    while (self._content_position < self._end_content and
                           self._codepoint == 0x00000020):  # ' ':
                        self.advance()
                        indent += 1
                    ignore = ((indent >= 0 and Text.eol(self._codepoint)) or  # blank line, either '\n' or '   \n'
                              self.comment_start())  # comment
                    if not ignore and self._nesting_level == 0:
                        if indent == self._indents[self._indents_level]:
                            pass
                        elif indent > self._indents[self._indents_level]:
                            self._indents_level += 1
                            self._indents.append(indent)
                            self._token.kind = TokenKind.INDENT
                        else:  # indent < self._indents[self._indents_level]
                            n = 0
                            while (self._indents_level > 0 and
                                   indent < self._indents[self._indents_level]):
                                n += 1
                                self._indents_level -= 1
                                self._indents.pop()
                            for _ in range(n - 1):
                                self._dedents.append(TokenKind.DEDENT)
                            if indent == self._indents[self._indents_level]:
                                self._token.kind = TokenKind.DEDENT
                            else:
                                self._token.kind = TokenKind.CORRUPTED_DEDENT
                    if not (self._token.kind == TokenKind.INDENT or
                            self._token.kind == TokenKind.DEDENT):
                        self._content_position = content_position  # rollback
                        self._codepoint = codepoint
        return (self._token.kind == TokenKind.INDENT or
                self._token.kind == TokenKind.DEDENT)




        """
        https://docs.python.org/3/reference/lexical_analysis.html#indentation
        The indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as follows.
        Before the first line of the file is read, a single zero is pushed on the stack; this will never be popped off again.
        The numbers pushed on the stack will always be strictly increasing from bottom to top. At the beginning of each logical line,
        the line’s indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger,
        it is pushed on the stack, and one INDENT token is generated. If it is smaller, it must be one of the numbers occurring on the stack;
        all numbers on the stack that are larger are popped off, and for each number popped off a DEDENT token is generated.
        At the end of the file, a DEDENT token is generated for each number remaining on the stack that is larger than zero.
        """


